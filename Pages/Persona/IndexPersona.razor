@page "/persona"

@using DurbelALora.Model
@using DurbelALora.Service
@using DurbelALora.Shared
@using System.Timers
@inject IPersonaService service
@inject NavigationManager navigationManager

<div class="card">
    <div class="card-header">
        <h3>Clientes</h3>
    </div>
    <div class="card-body">
        <div class="container">
            <div class="col-md-12">
                <div style="padding-bottom:10px;">
                    <a class="btn btn-primary" href="/persona/addpersona"><span class="oi oi-plus" aria-hidden="true">Agregar</span></a>
                </div>

                <div class="form-group">
                    <div class="input-group mb-3">
                        <span class="input-group-text">Busqueda por Nombre...</span>
                        <input class="form-control" type="text" placeholder=""
                               @bind-value="Filter"
                               @bind-value:event="oninput"
                               @onkeyup="@HandleKeyUp">
                    </div>
                </div>

                <div class="table table-responsive-lg">
                    @if (obj is null)
                    {
                        <div class="progress">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width:100%">
                                <br />
                                <p><em>Cargando...</em></p>
                            </div>
                        </div>
                    }
                    else if (!string.IsNullOrWhiteSpace(Filter) && pagination.Count == 0)
                    {
                        <div class="alert alert-danger" style="padding-top:10px;">
                            <center>
                                <strong>No existen artículos con: </strong>@Filter
                            </center>
                        </div>
                    }
                    else
                    {
                        <table class="table table-hover table-responsive table-bordered">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Nombre</th>
                                    <th>Fecha de Nacimiento</th>

                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in obj)
                                {
                                    <tr>
                                        <td>@item.ID</td>
                                        <td>@item.Nombre</td>
                                        <td>@item.FechaDeNacimiento.ToString("dd/MM/yyyy")</td>

                                        <td>
                                            <a class="btn btn-danger" title="Borrar" href="/persona/deletepersona/@item.ID">
                                                <span class="oi oi-trash" aria-hidden="true"></span>
                                            </a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                    }
                </div>

            </div>
        </div>
    </div>
    <div class="card-footer">
        <Pagination TotalPagesQuantity="pagination.PagesQuantity"
                    Radius="2"
                    SelectedPage="SelectedPage"></Pagination>
    </div>
</div>

@code {
    IEnumerable<Persona> obj;

    PaginationShared<Persona> pagination = new PaginationShared<Persona>();
    public string Filter;
    public int quantityPerPage { get; set; } = 10;
    private Timer aTimer;

    string error = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadItem();
            aTimer = new Timer(1000);
            aTimer.Elapsed += OnUserHasFinish;
            aTimer.AutoReset = false;

        }
        catch (Exception x)
        {
            error = $"Error: {x.Message}";
        }
    }

    async Task LoadItem(int page = 1, int quantityPerPage = 10, string sParam = "")
    {
        pagination = await Task.Run(() => service.GetPagination(page, quantityPerPage, sParam));
        obj = pagination.Records;
    }

    void HandleKeyUp(KeyboardEventArgs e)
    {
        aTimer.Stop();

        aTimer.Start();
    }


    private async Task SelectedPage(int page)
    {
        try
        {
            await LoadItem(page, quantityPerPage, Filter);
        }
        catch (Exception x)
        {

            error = $"Error: {x.Message}";
        }
    }

    private void OnUserHasFinish(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            try
            {
                var t = Task.Run(() => service.GetPagination(1, quantityPerPage, Filter));
                t.Wait();
                pagination = t.Result;
                obj = pagination.Records;
                StateHasChanged();
            }
            catch (Exception x)
            {

                error = $"Error: {x.Message}";
            }
        });
    }
}
